trigger:
  branches:
    include:
    - main
variables:
- name: terraformWorkingDirectory
  value: './linuxvm-test'
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Initialaze
  jobs:
    - job: TerraformInstall
      steps:
      - task: TerraformInstaller@1
        displayName: 'Terraform : Install'
        inputs:
          terraformVersion: 'latest'
- stage: Validate
  jobs:
    - job: TerraformInit
      steps:
      - task: TerraformTaskV4@4
        displayName: 'Terraform : Init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(terraformWorkingDirectory)'
          backendServiceArm: 'Xmas-Arm-Connection'
          backendAzureRmResourceGroupName: 'Xmas-Own'
          backendAzureRmStorageAccountName: 'xstoragesea001'
          backendAzureRmContainerName: 'terraform-state'
          backendAzureRmKey: 'Terraform.tfstate'
    - job: TerraformValidate
      dependsOn: TerraformInit
      steps:
      - task: TerraformTaskV4@4
        displayName: 'Terraform : Validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(terraformWorkingDirectory)'
      # - task: TerraformTaskV4@4
      #   inputs:
      #     provider: 'azurerm'
      #     command: 'plan'
      #     workingDirectory: '$(terraformWorkingDirectory)'
      #     environmentServiceNameAzureRM: 'Xmas-Arm-Connection'
- stage: Apply
  jobs:
    - job: TerraformApply
      steps:
      - task: TerraformTaskV4@4
        displayName: 'Terraform : Apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(terraformWorkingDirectory)'
          environmentServiceNameAzureRM: 'Xmas-Arm-Connection'
